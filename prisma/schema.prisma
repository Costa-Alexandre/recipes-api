generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// COUNTRIES
model Country {
  id         Int          @id @default(autoincrement())
  code       String       @unique
  country    String       @unique
  currency   Currency     @relation(fields: [currencyId], references: [id])
  currencyId Int
  languages  Language[]
  marketUnit MarketUnit[]
  User       User[]
}

model Currency {
  id       Int       @id @default(autoincrement())
  code     String    @unique
  currency String    @unique
  symbol   String
  country  Country[]
}

model Language {
  id       Int       @id @default(autoincrement())
  code     String    @unique
  language String    @unique
  country  Country[]
}

// INGREDIENTS
model Ingredient {
  id                   Int                    @id @default(autoincrement())
  ingredient           String                 @unique
  type                 IngredientType         @relation(fields: [typeId], references: [id])
  typeId               Int
  unit                 MeasureUnit            @relation(fields: [unitId], references: [id])
  unitId               Int
  ingredientsOnRecipes IngredientsOnRecipes[]
}

model MeasureUnit {
  id         Int          @id @default(autoincrement())
  unit       String       @unique
  ingredient Ingredient[]
}

model IngredientType {
  id         Int          @id @default(autoincrement())
  type       String       @unique
  ingredient Ingredient[]
}

model Utensil {
  id      Int      @id
  utensil String   @unique
  Recipe  Recipe[]
}

// MARKETS

model Market {
  id           Int          @id @default(autoincrement())
  market       String       @unique
  observations String?
  units        MarketUnit[]
}

model MarketUnit {
  id          Int               @id @default(autoincrement())
  unitName    String            @unique
  address     String?
  coordinates String?
  market      Market            @relation(fields: [marketId], references: [id])
  marketId    Int
  country     Country           @relation(fields: [countryId], references: [id])
  countryId   Int
  contacts    DeliveryContact[]
}

model DeliveryContact {
  id           Int        @id @default(autoincrement())
  site         String?
  phone        String?
  MarketUnit   MarketUnit @relation(fields: [marketUnitId], references: [id])
  marketUnitId Int
}

// RECIPES

model Recipe {
  id                   Int                    @id @default(autoincrement())
  title                String
  author               User                   @relation(fields: [authorId], references: [id])
  authorId             String
  difficulty           RecipeLevel?           @relation(fields: [recipeLevelId], references: [id])
  recipeLevelId        Int?
  category             Category[]
  image                String?
  instructions         String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  ingredientsOnRecipes IngredientsOnRecipes[]
  utensils             Utensil[]
}

model IngredientsOnRecipes {
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId Int
  recipe       Recipe     @relation(fields: [recipeId], references: [id])
  recipeId     Int
  quantity     Int

  @@id([ingredientId, recipeId])
}

model Category {
  id       Int      @id @default(autoincrement())
  category String   @unique
  recipe   Recipe[]
}

model RecipeLevel {
  id     Int      @id @default(autoincrement())
  level  String   @unique
  recipe Recipe[]
}

// USERS

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  username  String
  fullName  String?
  address   String?
  city      String?
  country   Country  @relation(fields: [countryId], references: [id])
  avatar    String?
  createdAt DateTime
  updatedAt DateTime
  role      Role     @default(USER)
  recipe    Recipe[]
  countryId Int
}

enum Role {
  ADMIN
  EDITOR
  USER
}
