generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// COUNTRIES
model Country {
  id         Int          @id @default(autoincrement())
  code       String       @unique @db.VarChar(2)
  country    String       @unique @db.VarChar(36)
  currency   Currency     @relation(fields: [currencyId], references: [id])
  currencyId Int
  languages  Language[]
  marketUnit MarketUnit[]
  user       User[]
}

model Currency {
  id       Int       @id @default(autoincrement())
  code     String    @unique @db.VarChar(3)
  currency String    @unique @db.VarChar(36)
  symbol   String    @db.VarChar(3)
  country  Country[]
}

model Language {
  id       Int       @id @default(autoincrement())
  code     String    @unique @db.VarChar(2)
  language String    @unique @db.VarChar(36)
  country  Country[]
}

// INGREDIENTS
model Ingredient {
  id                   String                 @id @default(uuid()) @db.Uuid
  ingredient           String                 @unique @db.VarChar(36)
  type                 IngredientType         @relation(fields: [typeId], references: [id])
  typeId               Int
  unit                 MeasureUnit            @relation(fields: [unitId], references: [id])
  unitId               Int
  ingredientsOnRecipes IngredientsOnRecipes[]
  priceLogs            PriceLog[]

  @@index([typeId], name: "idx_ingredients_type")
  @@index([ingredient], name: "idx_ingredients_ingredient")
}

model MeasureUnit {
  id         Int          @id @default(autoincrement())
  unit       String       @unique @db.VarChar(36)
  ingredient Ingredient[]
}

model IngredientType {
  id         Int          @id @default(autoincrement())
  type       String       @unique @db.VarChar(36)
  ingredient Ingredient[]
}

model Utensil {
  id      Int               @id @default(autoincrement())
  utensil String            @unique @db.VarChar(36)
  recipe  UtensilOnRecipe[]
}

model UtensilOnRecipe {
  Utensil   Utensil @relation(fields: [utensilId], references: [id])
  utensilId Int
  Recipe    Recipe  @relation(fields: [recipeId], references: [id])
  recipeId  String  @db.Uuid
  quantity  Int

  @@id([utensilId, recipeId])
  @@index([utensilId], name: "idx_utensil_on_recipe_utensil")
}

model PriceLog {
  id           String     @id @default(uuid()) @db.Uuid
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId String     @db.Uuid
  marketUnit   MarketUnit @relation(fields: [marketUnitId], references: [id])
  marketUnitId String     @db.Uuid
  date         DateTime   @db.Date
  price        Decimal    @db.Decimal(10, 2)
  User         User       @relation(fields: [userId], references: [id])
  userId       String     @db.Uuid

  @@index([ingredientId], name: "idx_price_logs_ingredient")
  @@index([marketUnitId], name: "idx_price_logs_market_unit")
  @@index([date], name: "idx_price_logs_date")
  @@index([userId], name: "idx_price_logs_user")
  @@index([price])
  @@index([ingredientId, marketUnitId, date, userId, price], name: "idx_price_logs_combined")
}

// MARKETS

model Market {
  id           Int            @id @default(autoincrement())
  market       String         @unique @db.VarChar(36)
  observations String?        @db.VarChar(255)
  units        MarketUnit[]
  ShoppingList ShoppingList[]
}

model MarketUnit {
  id          String            @id @default(uuid()) @db.Uuid
  unitName    String            @unique @db.VarChar(36)
  address     String?           @db.VarChar(255)
  coordinates String?           @db.VarChar(255)
  market      Market            @relation(fields: [marketId], references: [id])
  marketId    Int
  country     Country           @relation(fields: [countryId], references: [id])
  countryId   Int
  contacts    DeliveryContact[]
  PriceLog    PriceLog[]

  @@index([marketId])
}

model DeliveryContact {
  id           Int        @id @default(autoincrement())
  site         String?    @db.VarChar(255)
  phone        String?    @db.VarChar(36)
  marketUnit   MarketUnit @relation(fields: [marketUnitId], references: [id])
  marketUnitId String     @db.Uuid
}

// RECIPES

model Recipe {
  id                    String                  @id @default(uuid()) @db.Uuid
  title                 String                  @db.VarChar(255)
  author                User                    @relation(fields: [authorId], references: [id])
  authorId              String                  @db.Uuid
  difficulty            RecipeLevel?            @relation(fields: [recipeLevelId], references: [id])
  recipeLevelId         Int?
  servings              Int                     @default(4)
  category              Category[]
  template              String?                 @db.VarChar(255)
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  ingredientsOnRecipes  IngredientsOnRecipes[]
  utensils              UtensilOnRecipe[]
  RecipesOnShoppingList RecipesOnShoppingList[]

  @@index([recipeLevelId], name: "idx_recipes_level")
  @@index([authorId], name: "idx_recipes_author")
  @@index([title], name: "idx_recipes_title")
  @@index([createdAt], name: "idx_recipes_created_at")
}

model IngredientsOnRecipes {
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId String     @db.Uuid
  recipe       Recipe     @relation(fields: [recipeId], references: [id])
  recipeId     String     @db.Uuid
  quantity     Int

  @@id([ingredientId, recipeId])
  @@index([ingredientId], name: "idx_ingredient_on_recipe_ingredient")
}

model Category {
  id       Int      @id @default(autoincrement())
  category String   @unique @db.VarChar(36)
  recipe   Recipe[]
}

model RecipeLevel {
  id     Int      @id @default(autoincrement())
  level  String   @unique @db.VarChar(36)
  recipe Recipe[]
}

// SHOPPING LIST

model ShoppingList {
  id                    String                  @id @default(uuid()) @db.Uuid
  title                 String                  @default("My Shopping List") @db.VarChar(255)
  author                User                    @relation(fields: [authorId], references: [id])
  authorId              String                  @db.Uuid
  recipesOnShoppingList RecipesOnShoppingList[]
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  preferredMarkets      Market[]
  selectionCriteria     SelectionCriteria?

  @@index([authorId], name: "idx_shopping_list_author")
  @@index([title], name: "idx_shopping_list_title")
}

model RecipesOnShoppingList {
  recipe         Recipe       @relation(fields: [recipeId], references: [id])
  recipeId       String       @db.Uuid
  shoppingList   ShoppingList @relation(fields: [shoppingListId], references: [id])
  shoppingListId String       @db.Uuid
  servings       Int

  @@id([recipeId, shoppingListId])
  @@index([recipeId], name: "idx_recipe_on_shopping_list_recipe")
}

// USERS

model User {
  id             String         @id @default(uuid()) @db.Uuid
  email          String         @unique @db.VarChar(255)
  username       String         @unique @db.VarChar(36)
  hashedPassword String         @db.VarChar(100)
  fullName       String?        @db.VarChar(255)
  address        String?        @db.VarChar(255)
  city           String?        @db.VarChar(36)
  country        Country        @relation(fields: [countryId], references: [id])
  avatar         String?        @db.VarChar(2000)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  role           Role           @default(USER)
  recipe         Recipe[]
  countryId      Int
  Token          Token[]
  ShoppingList   ShoppingList[]
  PriceLog       PriceLog[]
}

model Token {
  id        String   @id @default(uuid()) @db.Uuid
  token     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
}

enum Role {
  ADMIN
  EDITOR
  USER
}

enum SelectionCriteria {
  PRICE
  DISTANCE
  AVAILABILITY
}
